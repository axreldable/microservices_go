// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tasks.proto

package models

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Task struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Email                string   `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Title                string   `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Done                 bool     `protobuf:"varint,4,opt,name=done" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_tasks_80e71c35b15481c5, []int{0}
}
func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (dst *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(dst, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Task) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Task) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

type TasksList struct {
	Tasks                []*Task  `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TasksList) Reset()         { *m = TasksList{} }
func (m *TasksList) String() string { return proto.CompactTextString(m) }
func (*TasksList) ProtoMessage()    {}
func (*TasksList) Descriptor() ([]byte, []int) {
	return fileDescriptor_tasks_80e71c35b15481c5, []int{1}
}
func (m *TasksList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TasksList.Unmarshal(m, b)
}
func (m *TasksList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TasksList.Marshal(b, m, deterministic)
}
func (dst *TasksList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TasksList.Merge(dst, src)
}
func (m *TasksList) XXX_Size() int {
	return xxx_messageInfo_TasksList.Size(m)
}
func (m *TasksList) XXX_DiscardUnknown() {
	xxx_messageInfo_TasksList.DiscardUnknown(m)
}

var xxx_messageInfo_TasksList proto.InternalMessageInfo

func (m *TasksList) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func init() {
	proto.RegisterType((*Task)(nil), "proto.Task")
	proto.RegisterType((*TasksList)(nil), "proto.TasksList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TasksClient is the client API for Tasks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TasksClient interface {
	List(ctx context.Context, in *User, opts ...grpc.CallOption) (*TasksList, error)
	Add(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
}

type tasksClient struct {
	cc *grpc.ClientConn
}

func NewTasksClient(cc *grpc.ClientConn) TasksClient {
	return &tasksClient{cc}
}

func (c *tasksClient) List(ctx context.Context, in *User, opts ...grpc.CallOption) (*TasksList, error) {
	out := new(TasksList)
	err := c.cc.Invoke(ctx, "/proto.Tasks/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Add(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/proto.Tasks/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tasksClient) Update(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/proto.Tasks/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Tasks service

type TasksServer interface {
	List(context.Context, *User) (*TasksList, error)
	Add(context.Context, *Task) (*Task, error)
	Update(context.Context, *Task) (*Task, error)
}

func RegisterTasksServer(s *grpc.Server, srv TasksServer) {
	s.RegisterService(&_Tasks_serviceDesc, srv)
}

func _Tasks_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Tasks/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).List(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Tasks/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Add(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tasks_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TasksServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Tasks/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TasksServer).Update(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Tasks",
	HandlerType: (*TasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Tasks_List_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _Tasks_Add_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tasks_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tasks.proto",
}

func init() { proto.RegisterFile("tasks.proto", fileDescriptor_tasks_80e71c35b15481c5) }

var fileDescriptor_tasks_80e71c35b15481c5 = []byte{
	// 205 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8e, 0x31, 0x4b, 0xc6, 0x30,
	0x10, 0x86, 0xbf, 0xb4, 0xc9, 0x87, 0xbd, 0x82, 0xc8, 0xe1, 0x10, 0x3a, 0xa5, 0x41, 0x30, 0x53,
	0x87, 0xfa, 0x0b, 0xdc, 0x9d, 0x82, 0x75, 0x8f, 0x24, 0x60, 0x68, 0xb5, 0xa5, 0x89, 0x83, 0xff,
	0x5e, 0x7a, 0x41, 0xe8, 0xe4, 0x94, 0x3c, 0x6f, 0x9e, 0x7b, 0x73, 0xd0, 0x66, 0x97, 0xe6, 0x34,
	0x6c, 0xfb, 0x9a, 0x57, 0x14, 0x74, 0x74, 0xe0, 0xbe, 0xf3, 0x47, 0x89, 0xf4, 0x1b, 0xf0, 0x57,
	0x97, 0x66, 0xbc, 0x85, 0x2a, 0x7a, 0xc9, 0x14, 0x33, 0xc2, 0x56, 0xd1, 0xe3, 0x3d, 0x88, 0xf0,
	0xe9, 0xe2, 0x22, 0x2b, 0xc5, 0x4c, 0x63, 0x0b, 0x1c, 0x69, 0x8e, 0x79, 0x09, 0xb2, 0x2e, 0x29,
	0x01, 0x22, 0x70, 0xbf, 0x7e, 0x05, 0xc9, 0x15, 0x33, 0x37, 0x96, 0xee, 0x7a, 0x80, 0xe6, 0xe8,
	0x4d, 0x2f, 0x31, 0x65, 0xec, 0x41, 0xd0, 0x1a, 0x92, 0xa9, 0xda, 0xb4, 0x63, 0x5b, 0xfe, 0x1e,
	0x0e, 0xc1, 0x96, 0x97, 0xf1, 0x07, 0x04, 0xf9, 0xf8, 0x08, 0x9c, 0x66, 0xfe, 0xa4, 0x29, 0x85,
	0xbd, 0xbb, 0x3b, 0x4d, 0x50, 0xa5, 0xbe, 0x60, 0x0f, 0xf5, 0xb3, 0xf7, 0x78, 0x2e, 0xeb, 0xce,
	0xa0, 0x2f, 0xf8, 0x00, 0xd7, 0x69, 0xf3, 0x2e, 0x87, 0xff, 0xac, 0xf7, 0x2b, 0xd1, 0xd3, 0x6f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xf5, 0x84, 0xd6, 0x2b, 0x01, 0x00, 0x00,
}
